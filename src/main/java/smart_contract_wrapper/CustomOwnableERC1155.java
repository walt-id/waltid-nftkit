package smart_contract_wrapper;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class CustomOwnableERC1155 extends Contract {
    public static final String BINARY = "60a06040819052600060808190526200001b916005916200013d565b503480156200002957600080fd5b5060405162002e2e38038062002e2e8339810160408190526200004c91620001f9565b6040805160208101909152600081526200006f81640100000000620000ce810204565b506200009662000087640100000000620000e7810204565b640100000000620000eb810204565b6003805460a060020a60ff02191690556007805461ffff191692151561ff001916929092176101009115159190910217905562000287565b8051620000e39060029060208401906200013d565b5050565b3390565b60038054600160a060020a03838116600160a060020a0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200014b9062000231565b90600052602060002090601f0160209004810192826200016f5760008555620001ba565b82601f106200018a57805160ff1916838001178555620001ba565b82800160010185558215620001ba579182015b82811115620001ba5782518255916020019190600101906200019d565b50620001c8929150620001cc565b5090565b5b80821115620001c85760008155600101620001cd565b80518015158114620001f457600080fd5b919050565b600080604083850312156200020d57600080fd5b6200021883620001e3565b91506200022860208401620001e3565b90509250929050565b6002810460018216806200024657607f821691505b6020821081141562000281577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b612b9780620002976000396000f3fe608060405234801561001057600080fd5b5060043610610199576000357c010000000000000000000000000000000000000000000000000000000090048063715018a611610100578063d2b04fd6116100a9578063f242432a11610083578063f242432a1461036e578063f2fde38b14610381578063f5298aca1461039457600080fd5b8063d2b04fd61461030c578063d73fb0831461031f578063e985e9c51461033257600080fd5b80638da5cb5b116100da5780638da5cb5b146102cb578063a22cb465146102e6578063bd72e4a5146102f957600080fd5b8063715018a6146102a85780638456cb59146102b0578063862440e2146102b857600080fd5b80633b273908116101625780634e1273f41161013c5780634e1273f4146102525780635c975abb146102725780636b20c4541461029557600080fd5b80633b2739081461022f5780633f4ba83a1461023a578063477df8d01461024257600080fd5b8062fdd58e1461019e57806301ffc9a7146101c45780630e89341c146101e75780631f7fdffa146102075780632eb2c2d61461021c575b600080fd5b6101b16101ac36600461210e565b6103a7565b6040519081526020015b60405180910390f35b6101d76101d2366004612163565b610453565b60405190151581526020016101bb565b6101fa6101f5366004612180565b61052f565b6040516101bb91906121f1565b61021a610215366004612366565b61060f565b005b61021a61022a3660046123ff565b610629565b60075460ff166101d7565b61021a6106ce565b600754610100900460ff166101d7565b6102656102603660046124a9565b6106e0565b6040516101bb91906125ac565b60035474010000000000000000000000000000000000000000900460ff166101d7565b61021a6102a33660046125bf565b610821565b61021a6108c2565b61021a6108d4565b61021a6102c6366004612633565b6108e4565b600354604051600160a060020a0390911681526020016101bb565b61021a6102f4366004612680565b6108fa565b61021a6103073660046126b3565b610905565b61021a61031a3660046126ce565b610920565b61021a61032d3660046126b3565b610959565b6101d761034036600461271d565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61021a61037c366004612747565b61097b565b61021a61038f3660046127ac565b610a19565b61021a6103a23660046127c7565b610aac565b6000600160a060020a03831661042d5760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260208181526040808320600160a060020a03949094168352929052205490565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167fd9b67a260000000000000000000000000000000000000000000000000000000014806104e057507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061052957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b60008181526004602052604081208054606092919061054d906127fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610579906127fa565b80156105c65780601f1061059b576101008083540402835291602001916105c6565b820191906000526020600020905b8154815290600101906020018083116105a957829003601f168201915b5050505050905060008151116105e4576105df83610b48565b610608565b6005816040516020016105f892919061286a565b6040516020818303038152906040525b9392505050565b610617610bdc565b61062384848484610c39565b50505050565b600160a060020a03851633148061064557506106458533610340565b6106ba5760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610424565b6106c78585858585610e45565b5050505050565b6106d6610bdc565b6106de6110fa565b565b6060815183511461075c5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610424565b6000835167ffffffffffffffff81111561077857610778612204565b6040519080825280602002602001820160405280156107a1578160200160208202803683370190505b50905060005b8451811015610819576107ec8582815181106107c5576107c561292a565b60200260200101518583815181106107df576107df61292a565b60200260200101516103a7565b8282815181106107fe576107fe61292a565b602090810291909101015261081281612988565b90506107a7565b509392505050565b600160a060020a03831633148061083d575061083d8333610340565b6108b25760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610424565b6108bd838383611160565b505050565b6108ca610bdc565b6106de6000611406565b6108dc610bdc565b6106de611465565b6108ec610bdc565b6108f682826114ca565b5050565b6108f633838361152e565b61090d610bdc565b6007805460ff1916911515919091179055565b610928610bdc565b610936600680546001019055565b600061094160065490565b905061094f85828685611626565b6106c781846114ca565b610961610bdc565b600780549115156101000261ff0019909216919091179055565b600160a060020a03851633148061099757506109978533610340565b610a0c5760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610424565b6106c78585858585611768565b610a21610bdc565b600160a060020a038116610aa05760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610424565b610aa981611406565b50565b600160a060020a038316331480610ac85750610ac88333610340565b610b3d5760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610424565b6108bd838383611952565b606060028054610b57906127fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610b83906127fa565b8015610bd05780601f10610ba557610100808354040283529160200191610bd0565b820191906000526020600020905b815481529060010190602001808311610bb357829003601f168201915b50505050509050919050565b600354600160a060020a031633146106de5760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610424565b600160a060020a038416610cb85760405160e560020a62461bcd02815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610424565b8151835114610d325760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610424565b33610d4281600087878787611b1b565b60005b8451811015610ddd57838181518110610d6057610d6061292a565b6020026020010151600080878481518110610d7d57610d7d61292a565b60200260200101518152602001908152602001600020600088600160a060020a0316600160a060020a031681526020019081526020016000206000828254610dc591906129a3565b90915550819050610dd581612988565b915050610d45565b5084600160a060020a03166000600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e2e9291906129bb565b60405180910390a46106c781600087878787611baf565b8151835114610ebf5760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610424565b600160a060020a038416610f3e5760405160e560020a62461bcd02815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610424565b33610f4d818787878787611b1b565b60005b845181101561108c576000858281518110610f6d57610f6d61292a565b602002602001015190506000858381518110610f8b57610f8b61292a565b60209081029190910181015160008481528083526040808220600160a060020a038e1683529093529190912054909150818110156110345760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610424565b600083815260208181526040808320600160a060020a038e8116855292528083208585039055908b168252812080548492906110719084906129a3565b925050819055505050508061108590612988565b9050610f50565b5084600160a060020a031686600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516110dc9291906129bb565b60405180910390a46110f2818787878787611baf565b505050505050565b611102611dc9565b6003805474ff0000000000000000000000000000000000000000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b600160a060020a0383166111df5760405160e560020a62461bcd02815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610424565b80518251146112595760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610424565b600033905061127c81856000868660405180602001604052806000815250611b1b565b60005b835181101561139957600084828151811061129c5761129c61292a565b6020026020010151905060008483815181106112ba576112ba61292a565b60209081029190910181015160008481528083526040808220600160a060020a038c1683529093529190912054909150818110156113625760405160e560020a62461bcd028152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610424565b600092835260208381526040808520600160a060020a038b168652909152909220910390558061139181612988565b91505061127f565b506000600160a060020a031684600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516113ea9291906129bb565b60405180910390a4604080516020810190915260009052610623565b60038054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61146d611e36565b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111433390565b600082815260046020908152604090912082516114e992840190612059565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6115158461052f565b60405161152291906121f1565b60405180910390a25050565b81600160a060020a031683600160a060020a031614156115b95760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610424565b600160a060020a03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600160a060020a0384166116a55760405160e560020a62461bcd02815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610424565b3360006116b185611ea4565b905060006116be85611ea4565b90506116cf83600089858589611b1b565b600086815260208181526040808320600160a060020a038b168452909152812080548792906116ff9084906129a3565b90915550506040805187815260208101879052600160a060020a03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461175f83600089898989611eef565b50505050505050565b600160a060020a0384166117e75760405160e560020a62461bcd02815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610424565b3360006117f385611ea4565b9050600061180085611ea4565b9050611810838989858589611b1b565b600086815260208181526040808320600160a060020a038c168452909152902054858110156118aa5760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610424565b600087815260208181526040808320600160a060020a038d8116855292528083208985039055908a168252812080548892906118e79084906129a3565b90915550506040805188815260208101889052600160a060020a03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611947848a8a8a8a8a611eef565b505050505050505050565b600160a060020a0383166119d15760405160e560020a62461bcd02815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610424565b3360006119dd84611ea4565b905060006119ea84611ea4565b9050611a0a83876000858560405180602001604052806000815250611b1b565b600085815260208181526040808320600160a060020a038a16845290915290205484811015611aa35760405160e560020a62461bcd028152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610424565b600086815260208181526040808320600160a060020a038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261175f565b60035474010000000000000000000000000000000000000000900460ff16156110f25760405160e560020a62461bcd02815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c652070617573656400000000000000000000000000000000000000006064820152608401610424565b600160a060020a0384163b156110f2576040517fbc197c81000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063bc197c8190611c0c90899089908890889088906004016129e0565b602060405180830381600087803b158015611c2657600080fd5b505af1925050508015611c56575060408051601f3d908101601f19168201909252611c5391810190612a3e565b60015b611d1257611c62612a5b565b806308c379a01415611c9f5750611c77612a94565b80611c825750611ca1565b8060405160e560020a62461bcd02815260040161042491906121f1565b505b60405160e560020a62461bcd02815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610424565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167fbc197c81000000000000000000000000000000000000000000000000000000001461175f5760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610424565b60035474010000000000000000000000000000000000000000900460ff166106de5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610424565b60035474010000000000000000000000000000000000000000900460ff16156106de5760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610424565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ede57611ede61292a565b602090810291909101015292915050565b600160a060020a0384163b156110f2576040517ff23a6e61000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063f23a6e6190611f4c9089908990889088908890600401612b1e565b602060405180830381600087803b158015611f6657600080fd5b505af1925050508015611f96575060408051601f3d908101601f19168201909252611f9391810190612a3e565b60015b611fa257611c62612a5b565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167ff23a6e61000000000000000000000000000000000000000000000000000000001461175f5760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610424565b828054612065906127fa565b90600052602060002090601f01602090048101928261208757600085556120cd565b82601f106120a057805160ff19168380011785556120cd565b828001600101855582156120cd579182015b828111156120cd5782518255916020019190600101906120b2565b506120d99291506120dd565b5090565b5b808211156120d957600081556001016120de565b8035600160a060020a038116811461210957600080fd5b919050565b6000806040838503121561212157600080fd5b61212a836120f2565b946020939093013593505050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114610aa957600080fd5b60006020828403121561217557600080fd5b813561060881612138565b60006020828403121561219257600080fd5b5035919050565b60005b838110156121b457818101518382015260200161219c565b838111156106235750506000910152565b600081518084526121dd816020860160208601612199565b601f01601f19169290920160200192915050565b60208152600061060860208301846121c5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561225957612259612204565b6040525050565b600067ffffffffffffffff82111561227a5761227a612204565b5060209081020190565b600082601f83011261229557600080fd5b813560206122a282612260565b6040516122af8282612233565b83815292820285018201928281019150868411156122cc57600080fd5b8286015b848110156122e757803583529183019183016122d0565b509695505050505050565b600082601f83011261230357600080fd5b813567ffffffffffffffff81111561231d5761231d612204565b604051612334601f8301601f191660200182612233565b81815284602083860101111561234957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561237c57600080fd5b612385856120f2565b9350602085013567ffffffffffffffff808211156123a257600080fd5b6123ae88838901612284565b945060408701359150808211156123c457600080fd5b6123d088838901612284565b935060608701359150808211156123e657600080fd5b506123f3878288016122f2565b91505092959194509250565b600080600080600060a0868803121561241757600080fd5b612420866120f2565b945061242e602087016120f2565b9350604086013567ffffffffffffffff8082111561244b57600080fd5b61245789838a01612284565b9450606088013591508082111561246d57600080fd5b61247989838a01612284565b9350608088013591508082111561248f57600080fd5b5061249c888289016122f2565b9150509295509295909350565b600080604083850312156124bc57600080fd5b823567ffffffffffffffff808211156124d457600080fd5b818501915085601f8301126124e857600080fd5b813560206124f582612260565b6040516125028282612233565b838152928202850182019282810191508984111561251f57600080fd5b948201945b8386101561254457612535866120f2565b82529482019490820190612524565b9650508601359250508082111561255a57600080fd5b5061256785828601612284565b9150509250929050565b600081518084526020808501945080840160005b838110156125a157815187529582019590820190600101612585565b509495945050505050565b6020815260006106086020830184612571565b6000806000606084860312156125d457600080fd5b6125dd846120f2565b9250602084013567ffffffffffffffff808211156125fa57600080fd5b61260687838801612284565b9350604086013591508082111561261c57600080fd5b5061262986828701612284565b9150509250925092565b6000806040838503121561264657600080fd5b82359150602083013567ffffffffffffffff81111561266457600080fd5b612567858286016122f2565b8035801515811461210957600080fd5b6000806040838503121561269357600080fd5b61269c836120f2565b91506126aa60208401612670565b90509250929050565b6000602082840312156126c557600080fd5b61060882612670565b600080600080608085870312156126e457600080fd5b6126ed856120f2565b935060208501359250604085013567ffffffffffffffff8082111561271157600080fd5b6123d0888389016122f2565b6000806040838503121561273057600080fd5b612739836120f2565b91506126aa602084016120f2565b600080600080600060a0868803121561275f57600080fd5b612768866120f2565b9450612776602087016120f2565b93506040860135925060608601359150608086013567ffffffffffffffff8111156127a057600080fd5b61249c888289016122f2565b6000602082840312156127be57600080fd5b610608826120f2565b6000806000606084860312156127dc57600080fd5b6127e5846120f2565b95602085013595506040909401359392505050565b60028104600182168061280e57607f821691505b60208210811415612848577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008151612860818560208601612199565b9290920192915050565b825460009081906002810460018083168061288657607f831692505b60208084108214156128bf577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b8180156128d357600181146128e457612911565b60ff19861689528489019650612911565b60008b81526020902060005b868110156129095781548b8201529085019083016128f0565b505084890196505b505050505050612921818561284e565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060001982141561299c5761299c612959565b5060010190565b600082198211156129b6576129b6612959565b500190565b6040815260006129ce6040830185612571565b82810360208401526129218185612571565b6000600160a060020a03808816835280871660208401525060a06040830152612a0c60a0830186612571565b8281036060840152612a1e8186612571565b90508281036080840152612a3281856121c5565b98975050505050505050565b600060208284031215612a5057600080fd5b815161060881612138565b600060033d1115612a915760046000803e7c01000000000000000000000000000000000000000000000000000000006000510490505b90565b600060443d1015612aa25790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612ad257505050505090565b8285019150815181811115612aea5750505050505090565b843d8701016020828501011115612b045750505050505090565b612b1360208286010187612233565b509095945050505050565b6000600160a060020a03808816835280871660208401525084604083015283606083015260a06080830152612b5660a08301846121c5565b97965050505050505056fea2646970667358221220223b1aa5be0de33e15ae1ebd4993ce5f155d2ba3634b97efa549ac53b9dab95364736f6c63430008090033";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_GETBURNABLEOPTION = "getBurnableOption";

    public static final String FUNC_GETTRANSFERABLEOPRION = "getTransferableOprion";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBURNABLEOPTION = "setBurnableOption";

    public static final String FUNC_SETTRANSFERABLEOPTION = "setTransferableOption";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CustomOwnableERC1155(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CustomOwnableERC1155(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CustomOwnableERC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CustomOwnableERC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
            typedResponse.ids = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(0);
            typedResponse.values = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
                typedResponse.ids = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(0);
                typedResponse.values = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
            typedResponse.id = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
                typedResponse.id = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.value = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.value = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> balanceOf(Address account, Uint256 id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(account, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> balanceOfBatch(DynamicArray<Address> accounts, DynamicArray<Uint256> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(accounts, ids), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(Address account, Uint256 id, Uint256 value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(account, id, value), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(Address account, DynamicArray<Uint256> ids, DynamicArray<Uint256> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(account, ids, values), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> getBurnableOption() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBURNABLEOPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> getTransferableOprion() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTRANSFERABLEOPRION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isApprovedForAll(Address account, Address operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(account, operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(Address account, Uint256 amount, Utf8String tokenURI, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(account, amount, tokenURI, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(Address to, DynamicArray<Uint256> ids, DynamicArray<Uint256> amounts, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH, 
                Arrays.<Type>asList(to, ids, amounts, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(Address from, Address to, DynamicArray<Uint256> ids, DynamicArray<Uint256> amounts, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(from, to, ids, amounts, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address from, Address to, Uint256 id, Uint256 amount, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(from, to, id, amount, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(Address operator, Bool approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(operator, approved), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurnableOption(Bool _tokensBurnable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBURNABLEOPTION, 
                Arrays.<Type>asList(_tokensBurnable), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransferableOption(Bool _tokensTransferable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSFERABLEOPTION, 
                Arrays.<Type>asList(_tokensTransferable), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(Uint256 tokenId, Utf8String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI, 
                Arrays.<Type>asList(tokenId, tokenURI), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> supportsInterface(Bytes4 interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(interfaceId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> uri(Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static CustomOwnableERC1155 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomOwnableERC1155(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CustomOwnableERC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomOwnableERC1155(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CustomOwnableERC1155 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CustomOwnableERC1155(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CustomOwnableERC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CustomOwnableERC1155(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CustomOwnableERC1155> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomOwnableERC1155.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CustomOwnableERC1155> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomOwnableERC1155.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomOwnableERC1155> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomOwnableERC1155.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomOwnableERC1155> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomOwnableERC1155.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public Address account;

        public Address operator;

        public Bool approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public Address account;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public Address operator;

        public Address from;

        public Address to;

        public DynamicArray<Uint256> ids;

        public DynamicArray<Uint256> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public Address operator;

        public Address from;

        public Address to;

        public Uint256 id;

        public Uint256 value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public Uint256 id;

        public Utf8String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public Address account;
    }
}
