package smart_contract_wrapper;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class CustomAccessControlERC721 extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162002dad38038062002dad833981016040819052620000349162000413565b8351849084906200004d90600090602085019062000271565b5080516200006390600190602084019062000271565b50506007805460ff1916905550600a805461ffff191683151561ff0019161761010083151502179055620000a260003364010000000062000118810204565b620000d87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6600064010000000062000131810204565b6200010e7f7f5260842512b02356ff92de24be96e7e1aac2e234d9371b076ac2b4cddda61e600064010000000062000131810204565b50505050620004f8565b6200012d82826401000000006200018f810204565b5050565b600062000147836401000000006200022d810204565b600084815260086020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001a4828264010000000062000242810204565b6200012d576000828152600860209081526040808320600160a060020a03851684529091529020805460ff19166001179055620001e96401000000006200026d810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60009081526008602052604090206001015490565b6000918252600860209081526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b8280546200027f90620004a2565b90600052602060002090601f016020900481019282620002a35760008555620002ee565b82601f10620002be57805160ff1916838001178555620002ee565b82800160010185558215620002ee579182015b82811115620002ee578251825591602001919060010190620002d1565b50620002fc92915062000300565b5090565b5b80821115620002fc576000815560010162000301565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126200035857600080fd5b81516001604060020a038082111562000375576200037562000317565b604051601f8301601f19908116603f01168101908282118183101715620003a057620003a062000317565b81604052838152602092508683858801011115620003bd57600080fd5b600091505b83821015620003e15785820183015181830184015290820190620003c2565b83821115620003f35760008385830101525b9695505050505050565b805180151581146200040e57600080fd5b919050565b600080600080608085870312156200042a57600080fd5b84516001604060020a03808211156200044257600080fd5b620004508883890162000346565b955060208701519150808211156200046757600080fd5b50620004768782880162000346565b9350506200048760408601620003fd565b91506200049760608601620003fd565b905092959194509250565b600281046001821680620004b757607f821691505b60208210811415620004f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6128a580620005086000396000f3fe608060405234801561001057600080fd5b5060043610610201576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161012c578063bd72e4a5116100bf578063d73fb0831161008e578063d73fb08314610470578063de374d9d14610483578063e3d5207214610495578063e985e9c5146104a257600080fd5b8063bd72e4a514610410578063c87b56dd14610423578063d539139314610436578063d547741f1461045d57600080fd5b806395d89b41116100fb57806395d89b41146103da578063a217fddf146103e2578063a22cb465146103ea578063b88d4fde146103fd57600080fd5b806370a082311461035f5780638456cb5914610372578063890257501461037a57806391d14854146103a157600080fd5b8063248a9ca3116101a457806342842e0e1161017357806342842e0e1461031b57806342966c681461032e5780635c975abb146103415780636352211e1461034c57600080fd5b8063248a9ca3146102ca5780632f2ff15d146102ed57806336568abe146103005780633f4ba83a1461031357600080fd5b8063081812fc116101e0578063081812fc14610264578063095ea7b31461028f578063162094c4146102a457806323b872dd146102b757600080fd5b806275a3171461020657806301ffc9a71461022c57806306fdde031461024f575b600080fd5b6102196102143660046122ea565b6104de565b6040519081526020015b60405180910390f35b61023f61023a366004612363565b610542565b6040519015158152602001610223565b610257610553565b60405161022391906123d8565b6102776102723660046123eb565b6105e5565b604051600160a060020a039091168152602001610223565b6102a261029d366004612404565b610693565b005b6102a26102b236600461242e565b6107cb565b6102a26102c536600461245f565b610800565b6102196102d83660046123eb565b60009081526008602052604090206001015490565b6102a26102fb36600461249b565b61088b565b6102a261030e36600461249b565b6108b1565b6102a2610940565b6102a261032936600461245f565b610957565b6102a261033c3660046123eb565b610972565b60075460ff1661023f565b61027761035a3660046123eb565b610a4e565b61021961036d3660046124c7565b610adc565b6102a2610b79565b6102197f7f5260842512b02356ff92de24be96e7e1aac2e234d9371b076ac2b4cddda61e81565b61023f6103af36600461249b565b6000918252600860209081526040808420600160a060020a0393909316845291905290205460ff1690565b610257610b8d565b610219600081565b6102a26103f83660046124f2565b610b9c565b6102a261040b36600461251c565b610ba7565b6102a261041e366004612598565b610c38565b6102576104313660046123eb565b610c58565b6102197f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102a261046b36600461249b565b610de6565b6102a261047e366004612598565b610e0c565b600a5461023f90610100900460ff1681565b600a5461023f9060ff1681565b61023f6104b03660046125b3565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661050b8133610e33565b610519600980546001019055565b600061052460095490565b90506105308582610eb6565b61053a8185611017565b949350505050565b600061054d826110c3565b92915050565b606060008054610562906125dd565b80601f016020809104026020016040519081016040528092919081815260200182805461058e906125dd565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b5050505050905090565b600081815260026020526040812054600160a060020a03166106775760405160e560020a62461bcd02815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260046020526040902054600160a060020a031690565b600061069e82610a4e565b905080600160a060020a031683600160a060020a0316141561072b5760405160e560020a62461bcd02815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161066e565b33600160a060020a0382161480610747575061074781336104b0565b6107bc5760405160e560020a62461bcd02815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161066e565b6107c68383611116565b505050565b7f7f5260842512b02356ff92de24be96e7e1aac2e234d9371b076ac2b4cddda61e6107f68133610e33565b6107c68383611017565b61080b335b82611191565b6108805760405160e560020a62461bcd02815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161066e565b6107c6838383611298565b6000828152600860205260409020600101546108a78133610e33565b6107c68383611483565b600160a060020a03811633146109325760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161066e565b61093c8282611525565b5050565b600061094c8133610e33565b6109546115a8565b50565b6107c683838360405180602001604052806000815250610ba7565b600a5460ff166109c75760405160e560020a62461bcd02815260206004820152601c60248201527f4e46543a20746f6b656e73206275726e2069732064697361626c656400000000604482015260640161066e565b6109d033610805565b610a455760405160e560020a62461bcd02815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000606482015260840161066e565b61095481611647565b600081815260026020526040812054600160a060020a03168061054d5760405160e560020a62461bcd02815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161066e565b6000600160a060020a038216610b5d5760405160e560020a62461bcd02815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161066e565b50600160a060020a031660009081526003602052604090205490565b6000610b858133610e33565b610954611687565b606060018054610562906125dd565b61093c338383611712565b610bb13383611191565b610c265760405160e560020a62461bcd02815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161066e565b610c32848484846117e4565b50505050565b6000610c448133610e33565b50600a805460ff1916911515919091179055565b600081815260026020526040902054606090600160a060020a0316610ce85760405160e560020a62461bcd02815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000606482015260840161066e565b60008281526006602052604081208054610d01906125dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2d906125dd565b8015610d7a5780601f10610d4f57610100808354040283529160200191610d7a565b820191906000526020600020905b815481529060010190602001808311610d5d57829003601f168201915b505050505090506000610d9860408051602081019091526000815290565b9050805160001415610dab575092915050565b815115610ddd578082604051602001610dc5929190612631565b60405160208183030381529060405292505050919050565b61053a84611870565b600082815260086020526040902060010154610e028133610e33565b6107c68383611525565b6000610e188133610e33565b50600a80549115156101000261ff0019909216919091179055565b6000828152600860209081526040808320600160a060020a038516845290915290205460ff1661093c57610e7181600160a060020a03166014611969565b610e7c836020611969565b604051602001610e8d929190612660565b60408051601f198184030181529082905260e560020a62461bcd02825261066e916004016123d8565b600160a060020a038216610f0f5760405160e560020a62461bcd02815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161066e565b600081815260026020526040902054600160a060020a031615610f775760405160e560020a62461bcd02815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161066e565b610f8360008383611bb3565b600160a060020a0382166000908152600360205260408120805460019290610fac908490612710565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600082815260026020526040902054600160a060020a03166110a45760405160e560020a62461bcd02815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e000000000000000000000000000000000000606482015260840161066e565b600082815260066020908152604090912082516107c69284019061213a565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061054d575061054d82611cae565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038416908117909155819061115882610a4e565b600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260026020526040812054600160a060020a031661121e5760405160e560020a62461bcd02815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161066e565b600061122983610a4e565b905080600160a060020a031684600160a060020a03161480611264575083600160a060020a0316611259846105e5565b600160a060020a0316145b8061053a5750600160a060020a0380821660009081526005602090815260408083209388168352929052205460ff1661053a565b82600160a060020a03166112ab82610a4e565b600160a060020a03161461132a5760405160e560020a62461bcd02815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161066e565b600160a060020a0382166113a85760405160e560020a62461bcd028152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161066e565b6113b3838383611bb3565b6113be600082611116565b600160a060020a03831660009081526003602052604081208054600192906113e7908490612728565b9091555050600160a060020a0382166000908152600360205260408120805460019290611415908490612710565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600860209081526040808320600160a060020a038516845290915290205460ff1661093c576000828152600860209081526040808320600160a060020a03851684529091529020805460ff191660011790556114e13390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600860209081526040808320600160a060020a038516845290915290205460ff161561093c576000828152600860209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60075460ff166115fd5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161066e565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b61165081611d88565b60008181526006602052604090208054611669906125dd565b159050610954576000818152600660205260408120610954916121be565b60075460ff16156116dd5760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161066e565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861162a3390565b81600160a060020a031683600160a060020a031614156117775760405160e560020a62461bcd02815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161066e565b600160a060020a03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6117ef848484611298565b6117fb84848484611e3c565b610c325760405160e560020a62461bcd02815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161066e565b600081815260026020526040902054606090600160a060020a03166119005760405160e560020a62461bcd02815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161066e565b600061191760408051602081019091526000815290565b905060008151116119375760405180602001604052806000815250611962565b8061194184611fe9565b604051602001611952929190612631565b6040516020818303038152906040525b9392505050565b6060600061197883600261273f565b611983906002612710565b67ffffffffffffffff81111561199b5761199b612225565b6040519080825280601f01601f1916602001820160405280156119c5576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106119fc576119fc61275e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a5f57611a5f61275e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611a9b84600261273f565b611aa6906001612710565b90505b6001811115611b61577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ae757611ae761275e565b1a7f010000000000000000000000000000000000000000000000000000000000000002828281518110611b1c57611b1c61275e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601090940493611b5a8161278d565b9050611aa9565b5083156119625760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161066e565b60075460ff1615611c2f5760405160e560020a62461bcd02815260206004820152602d60248201527f4552433732315061757361626c653a20746f6b656e206f7065726174696f6e7360448201527f207768696c652070617573656400000000000000000000000000000000000000606482015260840161066e565b600160a060020a03831615801590611c4f5750600160a060020a03821615155b156107c657600a54610100900460ff166107c65760405160e560020a62461bcd02815260206004820181905260248201527f4e46543a20746f6b656e73207472616e736665722069732064697361626c6564604482015260640161066e565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d3b57507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061054d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1983161461054d565b6000611d9382610a4e565b9050611da181600084611bb3565b611dac600083611116565b600160a060020a0381166000908152600360205260408120805460019290611dd5908490612728565b9091555050600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916905551839190600160a060020a038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000600160a060020a0384163b15611fde576040517f150b7a02000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063150b7a0290611e999033908990889088906004016127a4565b602060405180830381600087803b158015611eb357600080fd5b505af1925050508015611ee3575060408051601f3d908101601f19168201909252611ee0918101906127e0565b60015b611f96573d808015611f11576040519150601f19603f3d011682016040523d82523d6000602084013e611f16565b606091505b508051611f8e5760405160e560020a62461bcd02815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161066e565b805181602001fd5b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014905061053a565b506001949350505050565b60608161202957505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612053578061203d816127fd565b915061204c9050600a83612847565b915061202d565b60008167ffffffffffffffff81111561206e5761206e612225565b6040519080825280601f01601f191660200182016040528015612098576020820181803683370190505b5090505b841561053a576120ad600183612728565b91506120ba600a8661285b565b6120c5906030612710565b7f0100000000000000000000000000000000000000000000000000000000000000028183815181106120f9576120f961275e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612133600a86612847565b945061209c565b828054612146906125dd565b90600052602060002090601f01602090048101928261216857600085556121ae565b82601f1061218157805160ff19168380011785556121ae565b828001600101855582156121ae579182015b828111156121ae578251825591602001919060010190612193565b506121ba9291506121f4565b5090565b5080546121ca906125dd565b6000825580601f106121da575050565b601f01602090049060005260206000209081019061095491905b5b808211156121ba57600081556001016121f5565b8035600160a060020a038116811461222057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff8084111561226f5761226f612225565b604051601f8501601f19908116603f0116810190828211818310171561229757612297612225565b816040528093508581528686860111156122b057600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126122db57600080fd5b61196283833560208501612254565b600080604083850312156122fd57600080fd5b61230683612209565b9150602083013567ffffffffffffffff81111561232257600080fd5b61232e858286016122ca565b9150509250929050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461095457600080fd5b60006020828403121561237557600080fd5b813561196281612338565b60005b8381101561239b578181015183820152602001612383565b83811115610c325750506000910152565b600081518084526123c4816020860160208601612380565b601f01601f19169290920160200192915050565b60208152600061196260208301846123ac565b6000602082840312156123fd57600080fd5b5035919050565b6000806040838503121561241757600080fd5b61242083612209565b946020939093013593505050565b6000806040838503121561244157600080fd5b82359150602083013567ffffffffffffffff81111561232257600080fd5b60008060006060848603121561247457600080fd5b61247d84612209565b925061248b60208501612209565b9150604084013590509250925092565b600080604083850312156124ae57600080fd5b823591506124be60208401612209565b90509250929050565b6000602082840312156124d957600080fd5b61196282612209565b8035801515811461222057600080fd5b6000806040838503121561250557600080fd5b61250e83612209565b91506124be602084016124e2565b6000806000806080858703121561253257600080fd5b61253b85612209565b935061254960208601612209565b925060408501359150606085013567ffffffffffffffff81111561256c57600080fd5b8501601f8101871361257d57600080fd5b61258c87823560208401612254565b91505092959194509250565b6000602082840312156125aa57600080fd5b611962826124e2565b600080604083850312156125c657600080fd5b6125cf83612209565b91506124be60208401612209565b6002810460018216806125f157607f821691505b6020821081141561262b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008351612643818460208801612380565b835190830190612657818360208801612380565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612698816017850160208801612380565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516126d5816028840160208801612380565b01602801949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612723576127236126e1565b500190565b60008282101561273a5761273a6126e1565b500390565b6000816000190483118215151615612759576127596126e1565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008161279c5761279c6126e1565b506000190190565b6000600160a060020a038087168352808616602084015250836040830152608060608301526127d660808301846123ac565b9695505050505050565b6000602082840312156127f257600080fd5b815161196281612338565b6000600019821415612811576128116126e1565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261285657612856612818565b500490565b60008261286a5761286a612818565b50069056fea26469706673582212205889d595288888744274b91a20cc7db1300d0c3d700386b51f79809423cf274164736f6c63430008090033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_METADATA_UPDATER_ROLE = "METADATA_UPDATER_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTTO = "mintTo";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBURNABLEOPTION = "setBurnableOption";

    public static final String FUNC_SETTOKENURI = "setTokenURI";

    public static final String FUNC_SETTRANSFERABLEOPTION = "setTransferableOption";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOKENSBURNABLE = "tokensBurnable";

    public static final String FUNC_TOKENSTRANSFERABLE = "tokensTransferable";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CustomAccessControlERC721(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CustomAccessControlERC721(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CustomAccessControlERC721(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CustomAccessControlERC721(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.approved = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.approved = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.previousAdminRole = (Bytes32) eventValues.getIndexedValues().get(1);
            typedResponse.newAdminRole = (Bytes32) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.previousAdminRole = (Bytes32) eventValues.getIndexedValues().get(1);
                typedResponse.newAdminRole = (Bytes32) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<Bytes32> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> METADATA_UPDATER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_METADATA_UPDATER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(Address to, Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(to, tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> balanceOf(Address owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(owner), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> getApproved(Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getRoleAdmin(Bytes32 role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(role, account), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> hasRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(role, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isApprovedForAll(Address owner, Address operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(owner, operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintTo(Address _recipient, Utf8String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTTO, 
                Arrays.<Type>asList(_recipient, tokenURI), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> ownerOf(Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(role, account), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(role, account), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address from, Address to, Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(from, to, tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address from, Address to, Uint256 tokenId, DynamicBytes _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(from, to, tokenId, _data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(Address operator, Bool approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(operator, approved), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurnableOption(Bool _tokensBurnable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBURNABLEOPTION, 
                Arrays.<Type>asList(_tokensBurnable), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTokenURI(Uint256 tokenId, Utf8String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOKENURI, 
                Arrays.<Type>asList(tokenId, tokenURI), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransferableOption(Bool _tokensTransferable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSFERABLEOPTION, 
                Arrays.<Type>asList(_tokensTransferable), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> supportsInterface(Bytes4 interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(interfaceId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> tokenURI(Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> tokensBurnable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENSBURNABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> tokensTransferable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENSTRANSFERABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(Address from, Address to, Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(from, to, tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CustomAccessControlERC721 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomAccessControlERC721(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CustomAccessControlERC721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomAccessControlERC721(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CustomAccessControlERC721 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CustomAccessControlERC721(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CustomAccessControlERC721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CustomAccessControlERC721(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CustomAccessControlERC721> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Utf8String name, Utf8String symbol, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(name, symbol, _tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC721.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CustomAccessControlERC721> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Utf8String name, Utf8String symbol, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(name, symbol, _tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC721.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomAccessControlERC721> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Utf8String name, Utf8String symbol, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(name, symbol, _tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC721.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomAccessControlERC721> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Utf8String name, Utf8String symbol, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(name, symbol, _tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC721.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public Address owner;

        public Address approved;

        public Uint256 tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public Address owner;

        public Address operator;

        public Bool approved;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public Address account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public Bytes32 role;

        public Bytes32 previousAdminRole;

        public Bytes32 newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public Bytes32 role;

        public Address account;

        public Address sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public Bytes32 role;

        public Address account;

        public Address sender;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public Address account;
    }
}
