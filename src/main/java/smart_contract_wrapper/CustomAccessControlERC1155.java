package smart_contract_wrapper;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class CustomAccessControlERC1155 extends Contract {
    public static final String BINARY = "60a06040819052600060808190526200001b916006916200028e565b503480156200002957600080fd5b5060405162002ffc38038062002ffc8339810160408190526200004c916200034a565b6040805160208101909152600081526200006f8164010000000062000120810204565b506004805460ff191690556008805461ffff191683151561ff0019161761010083151502179055620000ac60003364010000000062000139810204565b620000e27f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660006401000000006200014e810204565b620001187f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c60006401000000006200014e810204565b5050620003d8565b8051620001359060029060208401906200028e565b5050565b620001358282640100000000620001ac810204565b600062000164836401000000006200024a810204565b600084815260036020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001c182826401000000006200025f810204565b62000135576000828152600360209081526040808320600160a060020a03851684529091529020805460ff19166001179055620002066401000000006200028a810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60009081526003602052604090206001015490565b6000918252600360209081526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b8280546200029c9062000382565b90600052602060002090601f016020900481019282620002c057600085556200030b565b82601f10620002db57805160ff19168380011785556200030b565b828001600101855582156200030b579182015b828111156200030b578251825591602001919060010190620002ee565b50620003199291506200031d565b5090565b5b808211156200031957600081556001016200031e565b805180151581146200034557600080fd5b919050565b600080604083850312156200035e57600080fd5b620003698362000334565b9150620003796020840162000334565b90509250929050565b6002810460018216806200039757607f821691505b60208210811415620003d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b612c1480620003e86000396000f3fe608060405234801561001057600080fd5b50600436106101e0576000357c0100000000000000000000000000000000000000000000000000000000900480637f34571011610116578063d2b04fd6116100b4578063d73fb0831161008e578063d73fb083146103f0578063e985e9c514610403578063f242432a1461043f578063f5298aca1461045257600080fd5b8063d2b04fd6146103a3578063d5391393146103b6578063d547741f146103dd57600080fd5b806391d14854116100f057806391d1485414610362578063a217fddf14610375578063a22cb4651461037d578063bd72e4a51461039057600080fd5b80637f345710146103205780638456cb5914610347578063862440e21461034f57600080fd5b806336568abe11610183578063477df8d01161015d578063477df8d0146102d25780634e1273f4146102e25780635c975abb146103025780636b20c4541461030d57600080fd5b806336568abe146102ac5780633b273908146102bf5780633f4ba83a146102ca57600080fd5b80631f7fdffa116101bf5780631f7fdffa1461024e578063248a9ca3146102635780632eb2c2d6146102865780632f2ff15d1461029957600080fd5b8062fdd58e146101e557806301ffc9a71461020b5780630e89341c1461022e575b600080fd5b6101f86101f3366004611e67565b610465565b6040519081526020015b60405180910390f35b61021e610219366004611ea7565b610511565b6040519015158152602001610202565b61024161023c366004611ec4565b610522565b6040516102029190611f35565b61026161025c366004612094565b610602565b005b6101f8610271366004611ec4565b60009081526003602052604090206001015490565b61026161029436600461212d565b610620565b6102616102a73660046121d7565b610668565b6102616102ba3660046121d7565b610692565b60085460ff1661021e565b610261610721565b600854610100900460ff1661021e565b6102f56102f0366004612203565b610737565b6040516102029190612306565b60045460ff1661021e565b61026161031b366004612319565b610878565b6101f87f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c81565b6102616108be565b61026161035d36600461238d565b6108d1565b61021e6103703660046121d7565b610905565b6101f8600081565b61026161038b3660046123da565b610930565b61026161039e366004612404565b61093b565b6102616103b136600461241f565b61095a565b6101f87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102616103eb3660046121d7565b6109bd565b6102616103fe366004612404565b6109e2565b61021e61041136600461246e565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61026161044d366004612498565b610a08565b6102616104603660046124fd565b610a50565b6000600160a060020a0383166104eb5760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260208181526040808320600160a060020a03949094168352929052205490565b600061051c82610a96565b92915050565b60008181526005602052604081208054606092919061054090612530565b80601f016020809104026020016040519081016040528092919081815260200182805461056c90612530565b80156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b5050505050905060008151116105d7576105d283610ad4565b6105fb565b6006816040516020016105eb92919061258a565b6040516020818303038152906040525b9392505050565b600061060d81610b68565b61061985858585610b72565b5050505050565b600160a060020a03851633148061063c575061063c8533610411565b61065b5760405160e560020a62461bcd0281526004016104e290612634565b6106198585858585610cd2565b60008281526003602052604090206001015461068381610b68565b61068d8383610e7d565b505050565b600160a060020a03811633146107135760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104e2565b61071d8282610f03565b5050565b600061072c81610b68565b610734610f6a565b50565b606081518351146107b35760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104e2565b6000835167ffffffffffffffff8111156107cf576107cf611f48565b6040519080825280602002602001820160405280156107f8578160200160208202803683370190505b50905060005b84518110156108705761084385828151811061081c5761081c612691565b602002602001015185838151811061083657610836612691565b6020026020010151610465565b82828151811061085557610855612691565b6020908102919091010152610869816126c3565b90506107fe565b509392505050565b600160a060020a03831633148061089457506108948333610411565b6108b35760405160e560020a62461bcd0281526004016104e290612634565b61068d838383610fbc565b60006108c981610b68565b610734611163565b7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c6108fb81610b68565b61068d83836111a0565b6000918252600360209081526040808420600160a060020a0393909316845291905290205460ff1690565b61071d338383611204565b600061094681610b68565b506008805460ff1916911515919091179055565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661098481610b68565b610992600780546001019055565b600061099d60075490565b90506109ab868287866112fc565b6109b581856111a0565b505050505050565b6000828152600360205260409020600101546109d881610b68565b61068d8383610f03565b60006109ed81610b68565b50600880549115156101000261ff0019909216919091179055565b600160a060020a038516331480610a245750610a248533610411565b610a435760405160e560020a62461bcd0281526004016104e290612634565b61061985858585856113e8565b600160a060020a038316331480610a6c5750610a6c8333610411565b610a8b5760405160e560020a62461bcd0281526004016104e290612634565b61068d838383611526565b6000600160e060020a031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061051c575061051c82611644565b606060028054610ae390612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0f90612530565b8015610b5c5780601f10610b3157610100808354040283529160200191610b5c565b820191906000526020600020905b815481529060010190602001808311610b3f57829003601f168201915b50505050509050919050565b61073481336116df565b600160a060020a038416610b9b5760405160e560020a62461bcd0281526004016104e2906126de565b8151835114610bbf5760405160e560020a62461bcd0281526004016104e29061273b565b33610bcf81600087878787611746565b60005b8451811015610c6a57838181518110610bed57610bed612691565b6020026020010151600080878481518110610c0a57610c0a612691565b60200260200101518152602001908152602001600020600088600160a060020a0316600160a060020a031681526020019081526020016000206000828254610c529190612798565b90915550819050610c62816126c3565b915050610bd2565b5084600160a060020a03166000600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610cbb9291906127b0565b60405180910390a4610619816000878787876117c2565b8151835114610cf65760405160e560020a62461bcd0281526004016104e29061273b565b600160a060020a038416610d1f5760405160e560020a62461bcd0281526004016104e2906127d5565b33610d2e818787878787611746565b60005b8451811015610e17576000858281518110610d4e57610d4e612691565b602002602001015190506000858381518110610d6c57610d6c612691565b60209081029190910181015160008481528083526040808220600160a060020a038e168352909352919091205490915081811015610dbf5760405160e560020a62461bcd0281526004016104e290612832565b600083815260208181526040808320600160a060020a038e8116855292528083208585039055908b16825281208054849290610dfc908490612798565b9250508190555050505080610e10906126c3565b9050610d31565b5084600160a060020a031686600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e679291906127b0565b60405180910390a46109b58187878787876117c2565b610e878282610905565b61071d576000828152600360209081526040808320600160a060020a03851684529091529020805460ff19166001179055610ebf3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f0d8282610905565b1561071d576000828152600360209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610f72611971565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b600160a060020a038316610fe55760405160e560020a62461bcd0281526004016104e29061288f565b80518251146110095760405160e560020a62461bcd0281526004016104e29061273b565b600033905061102c81856000868660405180602001604052806000815250611746565b60005b83518110156110f457600084828151811061104c5761104c612691565b60200260200101519050600084838151811061106a5761106a612691565b60209081029190910181015160008481528083526040808220600160a060020a038c1683529093529190912054909150818110156110bd5760405160e560020a62461bcd0281526004016104e2906128ec565b600092835260208381526040808520600160a060020a038b16865290915290922091039055806110ec816126c3565b91505061102f565b506000600160a060020a031684600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516111459291906127b0565b60405180910390a46040805160208101909152600090525b50505050565b61116b6119c8565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f9f3390565b600082815260056020908152604090912082516111bf92840190611db2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6111eb84610522565b6040516111f89190611f35565b60405180910390a25050565b81600160a060020a031683600160a060020a0316141561128f5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104e2565b600160a060020a03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600160a060020a0384166113255760405160e560020a62461bcd0281526004016104e2906126de565b33600061133185611a1e565b9050600061133e85611a1e565b905061134f83600089858589611746565b600086815260208181526040808320600160a060020a038b1684529091528120805487929061137f908490612798565b90915550506040805187815260208101879052600160a060020a03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46113df83600089898989611a69565b50505050505050565b600160a060020a0384166114115760405160e560020a62461bcd0281526004016104e2906127d5565b33600061141d85611a1e565b9050600061142a85611a1e565b905061143a838989858589611746565b600086815260208181526040808320600160a060020a038c1684529091529020548581101561147e5760405160e560020a62461bcd0281526004016104e290612832565b600087815260208181526040808320600160a060020a038d8116855292528083208985039055908a168252812080548892906114bb908490612798565b90915550506040805188815260208101889052600160a060020a03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461151b848a8a8a8a8a611a69565b505050505050505050565b600160a060020a03831661154f5760405160e560020a62461bcd0281526004016104e29061288f565b33600061155b84611a1e565b9050600061156884611a1e565b905061158883876000858560405180602001604052806000815250611746565b600085815260208181526040808320600160a060020a038a168452909152902054848110156115cc5760405160e560020a62461bcd0281526004016104e2906128ec565b600086815260208181526040808320600160a060020a038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526113df565b6000600160e060020a031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806116a75750600160e060020a031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061051c57507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a031983161461051c565b6116e98282610905565b61071d5761170181600160a060020a03166014611b68565b61170c836020611b68565b60405160200161171d929190612949565b60408051601f198184030181529082905260e560020a62461bcd0282526104e291600401611f35565b60045460ff16156109b55760405160e560020a62461bcd02815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c6520706175736564000000000000000000000000000000000000000060648201526084016104e2565b600160a060020a0384163b156109b5576040517fbc197c81000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063bc197c819061181f90899089908890889088906004016129ca565b602060405180830381600087803b15801561183957600080fd5b505af1925050508015611869575060408051601f3d908101601f1916820190925261186691810190612a28565b60015b61192557611875612a45565b806308c379a014156118b2575061188a612a7e565b8061189557506118b4565b8060405160e560020a62461bcd0281526004016104e29190611f35565b505b60405160e560020a62461bcd02815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104e2565b600160e060020a031981167fbc197c8100000000000000000000000000000000000000000000000000000000146113df5760405160e560020a62461bcd0281526004016104e290612b08565b60045460ff166119c65760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104e2565b565b60045460ff16156119c65760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104e2565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a5857611a58612691565b602090810291909101015292915050565b600160a060020a0384163b156109b5576040517ff23a6e61000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063f23a6e6190611ac69089908990889088908890600401612b65565b602060405180830381600087803b158015611ae057600080fd5b505af1925050508015611b10575060408051601f3d908101601f19168201909252611b0d91810190612a28565b60015b611b1c57611875612a45565b600160e060020a031981167ff23a6e6100000000000000000000000000000000000000000000000000000000146113df5760405160e560020a62461bcd0281526004016104e290612b08565b60606000611b77836002612ba8565b611b82906002612798565b67ffffffffffffffff811115611b9a57611b9a611f48565b6040519080825280601f01601f191660200182016040528015611bc4576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611bfb57611bfb612691565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c5e57611c5e612691565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611c9a846002612ba8565b611ca5906001612798565b90505b6001811115611d60577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ce657611ce6612691565b1a7f010000000000000000000000000000000000000000000000000000000000000002828281518110611d1b57611d1b612691565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601090940493611d5981612bc7565b9050611ca8565b5083156105fb5760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104e2565b828054611dbe90612530565b90600052602060002090601f016020900481019282611de05760008555611e26565b82601f10611df957805160ff1916838001178555611e26565b82800160010185558215611e26579182015b82811115611e26578251825591602001919060010190611e0b565b50611e32929150611e36565b5090565b5b80821115611e325760008155600101611e37565b8035600160a060020a0381168114611e6257600080fd5b919050565b60008060408385031215611e7a57600080fd5b611e8383611e4b565b946020939093013593505050565b600160e060020a03198116811461073457600080fd5b600060208284031215611eb957600080fd5b81356105fb81611e91565b600060208284031215611ed657600080fd5b5035919050565b60005b83811015611ef8578181015183820152602001611ee0565b8381111561115d5750506000910152565b60008151808452611f21816020860160208601611edd565b601f01601f19169290920160200192915050565b6020815260006105fb6020830184611f09565b60e060020a634e487b7102600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611f8757611f87611f48565b6040525050565b600067ffffffffffffffff821115611fa857611fa8611f48565b5060209081020190565b600082601f830112611fc357600080fd5b81356020611fd082611f8e565b604051611fdd8282611f61565b8381529282028501820192828101915086841115611ffa57600080fd5b8286015b848110156120155780358352918301918301611ffe565b509695505050505050565b600082601f83011261203157600080fd5b813567ffffffffffffffff81111561204b5761204b611f48565b604051612062601f8301601f191660200182611f61565b81815284602083860101111561207757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156120aa57600080fd5b6120b385611e4b565b9350602085013567ffffffffffffffff808211156120d057600080fd5b6120dc88838901611fb2565b945060408701359150808211156120f257600080fd5b6120fe88838901611fb2565b9350606087013591508082111561211457600080fd5b5061212187828801612020565b91505092959194509250565b600080600080600060a0868803121561214557600080fd5b61214e86611e4b565b945061215c60208701611e4b565b9350604086013567ffffffffffffffff8082111561217957600080fd5b61218589838a01611fb2565b9450606088013591508082111561219b57600080fd5b6121a789838a01611fb2565b935060808801359150808211156121bd57600080fd5b506121ca88828901612020565b9150509295509295909350565b600080604083850312156121ea57600080fd5b823591506121fa60208401611e4b565b90509250929050565b6000806040838503121561221657600080fd5b823567ffffffffffffffff8082111561222e57600080fd5b818501915085601f83011261224257600080fd5b8135602061224f82611f8e565b60405161225c8282611f61565b838152928202850182019282810191508984111561227957600080fd5b948201945b8386101561229e5761228f86611e4b565b8252948201949082019061227e565b965050860135925050808211156122b457600080fd5b506122c185828601611fb2565b9150509250929050565b600081518084526020808501945080840160005b838110156122fb578151875295820195908201906001016122df565b509495945050505050565b6020815260006105fb60208301846122cb565b60008060006060848603121561232e57600080fd5b61233784611e4b565b9250602084013567ffffffffffffffff8082111561235457600080fd5b61236087838801611fb2565b9350604086013591508082111561237657600080fd5b5061238386828701611fb2565b9150509250925092565b600080604083850312156123a057600080fd5b82359150602083013567ffffffffffffffff8111156123be57600080fd5b6122c185828601612020565b80358015158114611e6257600080fd5b600080604083850312156123ed57600080fd5b6123f683611e4b565b91506121fa602084016123ca565b60006020828403121561241657600080fd5b6105fb826123ca565b6000806000806080858703121561243557600080fd5b61243e85611e4b565b935060208501359250604085013567ffffffffffffffff8082111561246257600080fd5b6120fe88838901612020565b6000806040838503121561248157600080fd5b61248a83611e4b565b91506121fa60208401611e4b565b600080600080600060a086880312156124b057600080fd5b6124b986611e4b565b94506124c760208701611e4b565b93506040860135925060608601359150608086013567ffffffffffffffff8111156124f157600080fd5b6121ca88828901612020565b60008060006060848603121561251257600080fd5b61251b84611e4b565b95602085013595506040909401359392505050565b60028104600182168061254457607f821691505b602082108114156125685760e060020a634e487b7102600052602260045260246000fd5b50919050565b60008151612580818560208601611edd565b9290920192915050565b82546000908190600281046001808316806125a657607f831692505b60208084108214156125c95760e060020a634e487b710286526022600452602486fd5b8180156125dd57600181146125ee5761261b565b60ff1986168952848901965061261b565b60008b81526020902060005b868110156126135781548b8201529085019083016125fa565b505084890196505b50505050505061262b818561256e565b95945050505050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201527f6572206e6f7220617070726f7665640000000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b60006000198214156126d7576126d76126aa565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060408201527f6d69736d61746368000000000000000000000000000000000000000000000000606082015260800190565b600082198211156127ab576127ab6126aa565b500190565b6040815260006127c360408301856122cb565b828103602084015261262b81856122cb565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201527f72207472616e7366657200000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612981816017850160208801611edd565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516129be816028840160208801611edd565b01602801949350505050565b6000600160a060020a03808816835280871660208401525060a060408301526129f660a08301866122cb565b8281036060840152612a0881866122cb565b90508281036080840152612a1c8185611f09565b98975050505050505050565b600060208284031215612a3a57600080fd5b81516105fb81611e91565b600060033d1115612a7b5760046000803e7c01000000000000000000000000000000000000000000000000000000006000510490505b90565b600060443d1015612a8c5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612abc57505050505090565b8285019150815181811115612ad45750505050505090565b843d8701016020828501011115612aee5750505050505090565b612afd60208286010187611f61565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a6563746560408201527f6420746f6b656e73000000000000000000000000000000000000000000000000606082015260800190565b6000600160a060020a03808816835280871660208401525084604083015283606083015260a06080830152612b9d60a0830184611f09565b979650505050505050565b6000816000190483118215151615612bc257612bc26126aa565b500290565b600081612bd657612bd66126aa565b50600019019056fea26469706673582212200402789d70accb0ae58fa5081e49aff97827f470ce3962dc75378fc3ae2a8f7164736f6c63430008090033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_URI_SETTER_ROLE = "URI_SETTER_ROLE";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_GETBURNABLEOPTION = "getBurnableOption";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETTRANSFERABLEOPRION = "getTransferableOprion";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBURNABLEOPTION = "setBurnableOption";

    public static final String FUNC_SETTRANSFERABLEOPTION = "setTransferableOption";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> URI_SETTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI_SETTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String account, BigInteger id, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint256(id),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String account, List<BigInteger> ids, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(new Address(160, account),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> getBurnableOption() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBURNABLEOPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> getTransferableOprion() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTRANSFERABLEOPRION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, account),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String account, BigInteger amount, String tokenURI, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint256(amount),
                new Utf8String(tokenURI),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH, 
                Arrays.<Type>asList(new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(id),
                new Uint256(amount),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurnableOption(Boolean _tokensBurnable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBURNABLEOPTION, 
                Arrays.<Type>asList(new Bool(_tokensBurnable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransferableOption(Boolean _tokensTransferable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSFERABLEOPTION, 
                Arrays.<Type>asList(new Bool(_tokensTransferable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(BigInteger tokenId, String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI, 
                Arrays.<Type>asList(new Uint256(tokenId),
                new Utf8String(tokenURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomAccessControlERC1155(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomAccessControlERC1155(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CustomAccessControlERC1155(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CustomAccessControlERC1155(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Boolean _tokensBurnable, Boolean _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Bool(_tokensBurnable),
                new Bool(_tokensTransferable)));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Boolean _tokensBurnable, Boolean _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Bool(_tokensBurnable),
                new Bool(_tokensTransferable)));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean _tokensBurnable, Boolean _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Bool(_tokensBurnable),
                new Bool(_tokensTransferable)));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean _tokensBurnable, Boolean _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Bool(_tokensBurnable),
                new Bool(_tokensTransferable)));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
