package smart_contract_wrapper;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class CustomAccessControlERC1155 extends Contract {
    public static final String BINARY = "60a06040819052600060808190526200001b916006916200028e565b503480156200002957600080fd5b50604051620034c4380380620034c48339810160408190526200004c916200034a565b6040805160208101909152600081526200006f8164010000000062000120810204565b506004805460ff191690556008805461ffff191683151561ff0019161761010083151502179055620000ac60003364010000000062000139810204565b620000e27f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660006401000000006200014e810204565b620001187f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c60006401000000006200014e810204565b5050620003d8565b8051620001359060029060208401906200028e565b5050565b620001358282640100000000620001ac810204565b600062000164836401000000006200024a810204565b600084815260036020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001c182826401000000006200025f810204565b62000135576000828152600360209081526040808320600160a060020a03851684529091529020805460ff19166001179055620002066401000000006200028a810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60009081526003602052604090206001015490565b6000918252600360209081526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b8280546200029c9062000382565b90600052602060002090601f016020900481019282620002c057600085556200030b565b82601f10620002db57805160ff19168380011785556200030b565b828001600101855582156200030b579182015b828111156200030b578251825591602001919060010190620002ee565b50620003199291506200031d565b5090565b5b808211156200031957600081556001016200031e565b805180151581146200034557600080fd5b919050565b600080604083850312156200035e57600080fd5b620003698362000334565b9150620003796020840162000334565b90509250929050565b6002810460018216806200039757607f821691505b60208210811415620003d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6130dc80620003e86000396000f3fe608060405234801561001057600080fd5b50600436106101e0576000357c0100000000000000000000000000000000000000000000000000000000900480637f34571011610116578063d2b04fd6116100b4578063d73fb0831161008e578063d73fb08314610416578063e985e9c514610429578063f242432a14610465578063f5298aca1461047857600080fd5b8063d2b04fd6146103c9578063d5391393146103dc578063d547741f1461040357600080fd5b806391d14854116100f057806391d1485414610362578063a217fddf1461039b578063a22cb465146103a3578063bd72e4a5146103b657600080fd5b80637f345710146103205780638456cb5914610347578063862440e21461034f57600080fd5b806336568abe11610183578063477df8d01161015d578063477df8d0146102d25780634e1273f4146102e25780635c975abb146103025780636b20c4541461030d57600080fd5b806336568abe146102ac5780633b273908146102bf5780633f4ba83a146102ca57600080fd5b80631f7fdffa116101bf5780631f7fdffa1461024e578063248a9ca3146102635780632eb2c2d6146102865780632f2ff15d1461029957600080fd5b8062fdd58e146101e557806301ffc9a71461020b5780630e89341c1461022e575b600080fd5b6101f86101f3366004612594565b61048b565b6040519081526020015b60405180910390f35b61021e6102193660046125e9565b610537565b6040519015158152602001610202565b61024161023c366004612606565b610548565b6040516102029190612677565b61026161025c3660046127ec565b610628565b005b6101f8610271366004612606565b60009081526003602052604090206001015490565b610261610294366004612885565b610646565b6102616102a736600461292f565b6106e4565b6102616102ba36600461292f565b61070e565b60085460ff1661021e565b61026161079d565b600854610100900460ff1661021e565b6102f56102f036600461295b565b6107b3565b6040516102029190612a5e565b60045460ff1661021e565b61026161031b366004612a71565b6108f4565b6101f87f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c81565b610261610990565b61026161035d366004612ae5565b6109a3565b61021e61037036600461292f565b6000918252600360209081526040808420600160a060020a0393909316845291905290205460ff1690565b6101f8600081565b6102616103b1366004612b32565b6109d7565b6102616103c4366004612b5c565b6109e2565b6102616103d7366004612b77565b610a01565b6101f87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61026161041136600461292f565b610a64565b610261610424366004612b5c565b610a89565b61021e610437366004612bc6565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610261610473366004612bf0565b610aaf565b610261610486366004612c55565b610b4d565b6000600160a060020a0383166105115760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260208181526040808320600160a060020a03949094168352929052205490565b600061054282610be9565b92915050565b60008181526005602052604081208054606092919061056690612c88565b80601f016020809104026020016040519081016040528092919081815260200182805461059290612c88565b80156105df5780601f106105b4576101008083540402835291602001916105df565b820191906000526020600020905b8154815290600101906020018083116105c257829003601f168201915b5050505050905060008151116105fd576105f883610c3c565b610621565b600681604051602001610611929190612cf8565b6040516020818303038152906040525b9392505050565b600061063381610cd0565b61063f85858585610cda565b5050505050565b600160a060020a03851633148061066257506106628533610437565b6106d75760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610508565b61063f8585858585610ee6565b6000828152600360205260409020600101546106ff81610cd0565b6107098383611193565b505050565b600160a060020a038116331461078f5760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610508565b6107998282611235565b5050565b60006107a881610cd0565b6107b06112b8565b50565b6060815183511461082f5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610508565b6000835167ffffffffffffffff81111561084b5761084b61268a565b604051908082528060200260200182016040528015610874578160200160208202803683370190505b50905060005b84518110156108ec576108bf85828151811061089857610898612db8565b60200260200101518583815181106108b2576108b2612db8565b602002602001015161048b565b8282815181106108d1576108d1612db8565b60209081029190910101526108e581612e16565b905061087a565b509392505050565b600160a060020a03831633148061091057506109108333610437565b6109855760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610508565b61070983838361130a565b600061099b81610cd0565b6107b06115b2565b7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c6109cd81610cd0565b61070983836115ef565b610799338383611653565b60006109ed81610cd0565b506008805460ff1916911515919091179055565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610a2b81610cd0565b610a39600780546001019055565b6000610a4460075490565b9050610a528682878661174b565b610a5c81856115ef565b505050505050565b600082815260036020526040902060010154610a7f81610cd0565b6107098383611235565b6000610a9481610cd0565b50600880549115156101000261ff0019909216919091179055565b600160a060020a038516331480610acb5750610acb8533610437565b610b405760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610508565b61063f858585858561188d565b600160a060020a038316331480610b695750610b698333610437565b610bde5760405160e560020a62461bcd02815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206e6f7220617070726f76656400000000000000000000000000000000006064820152608401610508565b610709838383611a77565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b000000000000000000000000000000000000000000000000000000001480610542575061054282611c40565b606060028054610c4b90612c88565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7790612c88565b8015610cc45780601f10610c9957610100808354040283529160200191610cc4565b820191906000526020600020905b815481529060010190602001808311610ca757829003601f168201915b50505050509050919050565b6107b08133611d1a565b600160a060020a038416610d595760405160e560020a62461bcd02815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610508565b8151835114610dd35760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610508565b33610de381600087878787611d9d565b60005b8451811015610e7e57838181518110610e0157610e01612db8565b6020026020010151600080878481518110610e1e57610e1e612db8565b60200260200101518152602001908152602001600020600088600160a060020a0316600160a060020a031681526020019081526020016000206000828254610e669190612e31565b90915550819050610e7681612e16565b915050610de6565b5084600160a060020a03166000600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ecf929190612e49565b60405180910390a461063f81600087878787611e19565b8151835114610f605760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610508565b600160a060020a038416610fdf5760405160e560020a62461bcd02815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610508565b33610fee818787878787611d9d565b60005b845181101561112d57600085828151811061100e5761100e612db8565b60200260200101519050600085838151811061102c5761102c612db8565b60209081029190910181015160008481528083526040808220600160a060020a038e1683529093529190912054909150818110156110d55760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610508565b600083815260208181526040808320600160a060020a038e8116855292528083208585039055908b16825281208054849290611112908490612e31565b925050819055505050508061112690612e16565b9050610ff1565b5084600160a060020a031686600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161117d929190612e49565b60405180910390a4610a5c818787878787611e19565b6000828152600360209081526040808320600160a060020a038516845290915290205460ff16610799576000828152600360209081526040808320600160a060020a03851684529091529020805460ff191660011790556111f13390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600360209081526040808320600160a060020a038516845290915290205460ff1615610799576000828152600360209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6112c0612033565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b600160a060020a0383166113895760405160e560020a62461bcd02815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610508565b80518251146114035760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610508565b600033905061142681856000868660405180602001604052806000815250611d9d565b60005b835181101561154357600084828151811061144657611446612db8565b60200260200101519050600084838151811061146457611464612db8565b60209081029190910181015160008481528083526040808220600160a060020a038c16835290935291909120549091508181101561150c5760405160e560020a62461bcd028152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610508565b600092835260208381526040808520600160a060020a038b168652909152909220910390558061153b81612e16565b915050611429565b506000600160a060020a031684600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611594929190612e49565b60405180910390a46040805160208101909152600090525b50505050565b6115ba61208a565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112ed3390565b6000828152600560209081526040909120825161160e928401906124df565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61163a84610548565b6040516116479190612677565b60405180910390a25050565b81600160a060020a031683600160a060020a031614156116de5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610508565b600160a060020a03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600160a060020a0384166117ca5760405160e560020a62461bcd02815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610508565b3360006117d6856120e0565b905060006117e3856120e0565b90506117f483600089858589611d9d565b600086815260208181526040808320600160a060020a038b16845290915281208054879290611824908490612e31565b90915550506040805187815260208101879052600160a060020a03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46118848360008989898961212b565b50505050505050565b600160a060020a03841661190c5760405160e560020a62461bcd02815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610508565b336000611918856120e0565b90506000611925856120e0565b9050611935838989858589611d9d565b600086815260208181526040808320600160a060020a038c168452909152902054858110156119cf5760405160e560020a62461bcd02815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610508565b600087815260208181526040808320600160a060020a038d8116855292528083208985039055908a16825281208054889290611a0c908490612e31565b90915550506040805188815260208101889052600160a060020a03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a6c848a8a8a8a8a61212b565b505050505050505050565b600160a060020a038316611af65760405160e560020a62461bcd02815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610508565b336000611b02846120e0565b90506000611b0f846120e0565b9050611b2f83876000858560405180602001604052806000815250611d9d565b600085815260208181526040808320600160a060020a038a16845290915290205484811015611bc85760405160e560020a62461bcd028152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610508565b600086815260208181526040808320600160a060020a038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611884565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167fd9b67a26000000000000000000000000000000000000000000000000000000001480611ccd57507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061054257507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19831614610542565b6000828152600360209081526040808320600160a060020a038516845290915290205460ff1661079957611d5881600160a060020a03166014612295565b611d63836020612295565b604051602001611d74929190612e6e565b60408051601f198184030181529082905260e560020a62461bcd02825261050891600401612677565b60045460ff1615610a5c5760405160e560020a62461bcd02815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c652070617573656400000000000000000000000000000000000000006064820152608401610508565b600160a060020a0384163b15610a5c576040517fbc197c81000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063bc197c8190611e769089908990889088908890600401612eef565b602060405180830381600087803b158015611e9057600080fd5b505af1925050508015611ec0575060408051601f3d908101601f19168201909252611ebd91810190612f4d565b60015b611f7c57611ecc612f6a565b806308c379a01415611f095750611ee1612fa3565b80611eec5750611f0b565b8060405160e560020a62461bcd0281526004016105089190612677565b505b60405160e560020a62461bcd02815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610508565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167fbc197c8100000000000000000000000000000000000000000000000000000000146118845760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610508565b60045460ff166120885760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610508565b565b60045460ff16156120885760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610508565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061211a5761211a612db8565b602090810291909101015292915050565b600160a060020a0384163b15610a5c576040517ff23a6e61000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063f23a6e6190612188908990899088908890889060040161302d565b602060405180830381600087803b1580156121a257600080fd5b505af19250505080156121d2575060408051601f3d908101601f191682019092526121cf91810190612f4d565b60015b6121de57611ecc612f6a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167ff23a6e6100000000000000000000000000000000000000000000000000000000146118845760405160e560020a62461bcd02815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610508565b606060006122a4836002613070565b6122af906002612e31565b67ffffffffffffffff8111156122c7576122c761268a565b6040519080825280601f01601f1916602001820160405280156122f1576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061232857612328612db8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061238b5761238b612db8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006123c7846002613070565b6123d2906001612e31565b90505b600181111561248d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061241357612413612db8565b1a7f01000000000000000000000000000000000000000000000000000000000000000282828151811061244857612448612db8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506010909404936124868161308f565b90506123d5565b5083156106215760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610508565b8280546124eb90612c88565b90600052602060002090601f01602090048101928261250d5760008555612553565b82601f1061252657805160ff1916838001178555612553565b82800160010185558215612553579182015b82811115612553578251825591602001919060010190612538565b5061255f929150612563565b5090565b5b8082111561255f5760008155600101612564565b8035600160a060020a038116811461258f57600080fd5b919050565b600080604083850312156125a757600080fd5b6125b083612578565b946020939093013593505050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811681146107b057600080fd5b6000602082840312156125fb57600080fd5b8135610621816125be565b60006020828403121561261857600080fd5b5035919050565b60005b8381101561263a578181015183820152602001612622565b838111156115ac5750506000910152565b6000815180845261266381602086016020860161261f565b601f01601f19169290920160200192915050565b602081526000610621602083018461264b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156126df576126df61268a565b6040525050565b600067ffffffffffffffff8211156127005761270061268a565b5060209081020190565b600082601f83011261271b57600080fd5b81356020612728826126e6565b60405161273582826126b9565b838152928202850182019282810191508684111561275257600080fd5b8286015b8481101561276d5780358352918301918301612756565b509695505050505050565b600082601f83011261278957600080fd5b813567ffffffffffffffff8111156127a3576127a361268a565b6040516127ba601f8301601f1916602001826126b9565b8181528460208386010111156127cf57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561280257600080fd5b61280b85612578565b9350602085013567ffffffffffffffff8082111561282857600080fd5b6128348883890161270a565b9450604087013591508082111561284a57600080fd5b6128568883890161270a565b9350606087013591508082111561286c57600080fd5b5061287987828801612778565b91505092959194509250565b600080600080600060a0868803121561289d57600080fd5b6128a686612578565b94506128b460208701612578565b9350604086013567ffffffffffffffff808211156128d157600080fd5b6128dd89838a0161270a565b945060608801359150808211156128f357600080fd5b6128ff89838a0161270a565b9350608088013591508082111561291557600080fd5b5061292288828901612778565b9150509295509295909350565b6000806040838503121561294257600080fd5b8235915061295260208401612578565b90509250929050565b6000806040838503121561296e57600080fd5b823567ffffffffffffffff8082111561298657600080fd5b818501915085601f83011261299a57600080fd5b813560206129a7826126e6565b6040516129b482826126b9565b83815292820285018201928281019150898411156129d157600080fd5b948201945b838610156129f6576129e786612578565b825294820194908201906129d6565b96505086013592505080821115612a0c57600080fd5b50612a198582860161270a565b9150509250929050565b600081518084526020808501945080840160005b83811015612a5357815187529582019590820190600101612a37565b509495945050505050565b6020815260006106216020830184612a23565b600080600060608486031215612a8657600080fd5b612a8f84612578565b9250602084013567ffffffffffffffff80821115612aac57600080fd5b612ab88783880161270a565b93506040860135915080821115612ace57600080fd5b50612adb8682870161270a565b9150509250925092565b60008060408385031215612af857600080fd5b82359150602083013567ffffffffffffffff811115612b1657600080fd5b612a1985828601612778565b8035801515811461258f57600080fd5b60008060408385031215612b4557600080fd5b612b4e83612578565b915061295260208401612b22565b600060208284031215612b6e57600080fd5b61062182612b22565b60008060008060808587031215612b8d57600080fd5b612b9685612578565b935060208501359250604085013567ffffffffffffffff80821115612bba57600080fd5b61285688838901612778565b60008060408385031215612bd957600080fd5b612be283612578565b915061295260208401612578565b600080600080600060a08688031215612c0857600080fd5b612c1186612578565b9450612c1f60208701612578565b93506040860135925060608601359150608086013567ffffffffffffffff811115612c4957600080fd5b61292288828901612778565b600080600060608486031215612c6a57600080fd5b612c7384612578565b95602085013595506040909401359392505050565b600281046001821680612c9c57607f821691505b60208210811415612cd6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008151612cee81856020860161261f565b9290920192915050565b8254600090819060028104600180831680612d1457607f831692505b6020808410821415612d4d577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015612d615760018114612d7257612d9f565b60ff19861689528489019650612d9f565b60008b81526020902060005b86811015612d975781548b820152908501908301612d7e565b505084890196505b505050505050612daf8185612cdc565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415612e2a57612e2a612de7565b5060010190565b60008219821115612e4457612e44612de7565b500190565b604081526000612e5c6040830185612a23565b8281036020840152612daf8185612a23565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ea681601785016020880161261f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612ee381602884016020880161261f565b01602801949350505050565b6000600160a060020a03808816835280871660208401525060a06040830152612f1b60a0830186612a23565b8281036060840152612f2d8186612a23565b90508281036080840152612f41818561264b565b98975050505050505050565b600060208284031215612f5f57600080fd5b8151610621816125be565b600060033d1115612fa05760046000803e7c01000000000000000000000000000000000000000000000000000000006000510490505b90565b600060443d1015612fb15790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612fe157505050505090565b8285019150815181811115612ff95750505050505090565b843d87010160208285010111156130135750505050505090565b613022602082860101876126b9565b509095945050505050565b6000600160a060020a03808816835280871660208401525084604083015283606083015260a0608083015261306560a083018461264b565b979650505050505050565b600081600019048311821515161561308a5761308a612de7565b500290565b60008161309e5761309e612de7565b50600019019056fea26469706673582212206964bebff5fd002025ddc346a7e521b067896325cb50823d86a7a5052241f9c864736f6c63430008090033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_URI_SETTER_ROLE = "URI_SETTER_ROLE";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_GETBURNABLEOPTION = "getBurnableOption";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETTRANSFERABLEOPRION = "getTransferableOprion";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBURNABLEOPTION = "setBurnableOption";

    public static final String FUNC_SETTRANSFERABLEOPTION = "setTransferableOption";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CustomAccessControlERC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.previousAdminRole = (Bytes32) eventValues.getIndexedValues().get(1);
            typedResponse.newAdminRole = (Bytes32) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.previousAdminRole = (Bytes32) eventValues.getIndexedValues().get(1);
                typedResponse.newAdminRole = (Bytes32) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
            typedResponse.ids = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(0);
            typedResponse.values = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
                typedResponse.ids = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(0);
                typedResponse.values = (DynamicArray<Uint256>) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
            typedResponse.id = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(2);
                typedResponse.id = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.value = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.value = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<Bytes32> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> URI_SETTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI_SETTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> balanceOf(Address account, Uint256 id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(account, id), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> balanceOfBatch(DynamicArray<Address> accounts, DynamicArray<Uint256> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(accounts, ids), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(Address account, Uint256 id, Uint256 value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(account, id, value), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(Address account, DynamicArray<Uint256> ids, DynamicArray<Uint256> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(account, ids, values), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> getBurnableOption() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBURNABLEOPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getRoleAdmin(Bytes32 role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> getTransferableOprion() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTRANSFERABLEOPRION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(role, account), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> hasRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(role, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isApprovedForAll(Address account, Address operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(account, operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(Address account, Uint256 amount, Utf8String tokenURI, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(account, amount, tokenURI, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(Address to, DynamicArray<Uint256> ids, DynamicArray<Uint256> amounts, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH, 
                Arrays.<Type>asList(to, ids, amounts, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(role, account), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(Bytes32 role, Address account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(role, account), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(Address from, Address to, DynamicArray<Uint256> ids, DynamicArray<Uint256> amounts, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(from, to, ids, amounts, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address from, Address to, Uint256 id, Uint256 amount, DynamicBytes data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(from, to, id, amount, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(Address operator, Bool approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(operator, approved), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurnableOption(Bool _tokensBurnable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBURNABLEOPTION, 
                Arrays.<Type>asList(_tokensBurnable), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransferableOption(Bool _tokensTransferable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSFERABLEOPTION, 
                Arrays.<Type>asList(_tokensTransferable), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(Uint256 tokenId, Utf8String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI, 
                Arrays.<Type>asList(tokenId, tokenURI), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> supportsInterface(Bytes4 interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(interfaceId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> uri(Uint256 tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomAccessControlERC1155(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CustomAccessControlERC1155(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CustomAccessControlERC1155(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CustomAccessControlERC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CustomAccessControlERC1155(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CustomAccessControlERC1155> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Bool _tokensBurnable, Bool _tokensTransferable) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_tokensBurnable, _tokensTransferable));
        return deployRemoteCall(CustomAccessControlERC1155.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public Address account;

        public Address operator;

        public Bool approved;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public Address account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public Bytes32 role;

        public Bytes32 previousAdminRole;

        public Bytes32 newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public Bytes32 role;

        public Address account;

        public Address sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public Bytes32 role;

        public Address account;

        public Address sender;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public Address operator;

        public Address from;

        public Address to;

        public DynamicArray<Uint256> ids;

        public DynamicArray<Uint256> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public Address operator;

        public Address from;

        public Address to;

        public Uint256 id;

        public Uint256 value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public Uint256 id;

        public Utf8String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public Address account;
    }
}
