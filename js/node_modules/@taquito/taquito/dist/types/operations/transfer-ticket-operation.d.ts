import { OperationContentsAndResult } from '@taquito/rpc';
import { Context } from '../context';
import { Operation } from '../operations';
import { GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation, ForgedBytes, RPCTransferTicketOperation } from './types';
/**
 *
 * @description Transfer tickets from a Tezos address (tz1, tz2 or tz3) to a smart contract address (KT1) (everything on layer 1 at this step)
 *
 * @warn Currently only supports one L2 ticket holder transfer at once. ie. one collection of tickets owned by tz1, tz2 or tz3 to a smart contract.
 */
export declare class TransferTicketOperation extends Operation implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {
    private readonly params;
    private readonly source;
    constructor(hash: string, params: RPCTransferTicketOperation, source: string, raw: ForgedBytes, results: OperationContentsAndResult[], context: Context);
    get operationResults(): import("@taquito/rpc").OperationResultTransferTicket | undefined;
    get status(): "applied" | "failed" | "skipped" | "backtracked" | "unknown";
    get fee(): number;
    get gasLimit(): number;
    get storageLimit(): number;
    get consumedGas(): string | undefined;
    get consumedMilliGas(): string | undefined;
}
