"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcInjector = void 0;
const helper_1 = require("./helper");
const http_utils_1 = require("@taquito/http-utils");
class RpcInjector {
    constructor(context) {
        this.context = context;
    }
    inject(signedOperationBytes) {
        return __awaiter(this, void 0, void 0, function* () {
            let hash;
            try {
                hash = yield this.context.rpc.injectOperation(signedOperationBytes);
            }
            catch (error) {
                const stringToStrip = '. You may want to use --replace to provide adequate fee and replace it';
                if (error instanceof http_utils_1.HttpResponseError && error.message.includes(stringToStrip)) {
                    throw helper_1.formatErrorMessage(error, stringToStrip);
                }
                else {
                    throw error;
                }
            }
            return hash;
        });
    }
}
exports.RpcInjector = RpcInjector;
//# sourceMappingURL=rpc-injector.js.map